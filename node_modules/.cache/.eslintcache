[{"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\index.tsx":"1","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reportWebVitals.js":"2","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\app\\store.ts":"3","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\App.tsx":"4","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\layouts\\Layout.tsx":"5","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\app\\hooks.ts":"6","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\Helper.ts":"7","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\MyLockedStaking.tsx":"8","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\ModalOverlay.tsx":"9","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\Staking.tsx":"10","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\layouts\\AppHeader.tsx":"11","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\Banner.tsx":"12","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reducers\\index.ts":"13","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\MathCommon.ts":"14","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\_mocks_\\PackageData.ts":"15","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\hooks\\userInterval.ts":"16","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\NoData.tsx":"17","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\MyLockedItem.tsx":"18","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\PackageItem.tsx":"19","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\ButtonConnectWallet.tsx":"20","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reducers\\action.ts":"21","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reducers\\reducer.ts":"22","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reducers\\selector.ts":"23","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\DateFormat.ts":"24","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\Notification.ts":"25","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\accounts\\index.tsx":"26","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\connections\\web3Modal.ts":"27","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\StakeDetail.tsx":"28","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\getWeb3List.ts":"29","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\AlertHashTransation.tsx":"30"},{"size":900,"mtime":1640593354053,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":1640175422468,"results":"33","hashOfConfig":"32"},{"size":672,"mtime":1640344315303,"results":"34","hashOfConfig":"32"},{"size":3955,"mtime":1640594100502,"results":"35","hashOfConfig":"32"},{"size":452,"mtime":1640591600291,"results":"36","hashOfConfig":"32"},{"size":273,"mtime":1640591600291,"results":"37","hashOfConfig":"32"},{"size":695,"mtime":1640591600291,"results":"38","hashOfConfig":"32"},{"size":4637,"mtime":1640591600290,"results":"39","hashOfConfig":"32"},{"size":1084,"mtime":1640591600296,"results":"40","hashOfConfig":"32"},{"size":1309,"mtime":1640591600291,"results":"41","hashOfConfig":"32"},{"size":819,"mtime":1640591600291,"results":"42","hashOfConfig":"32"},{"size":2558,"mtime":1640522768077,"results":"43","hashOfConfig":"32"},{"size":79,"mtime":1640522795261,"results":"44","hashOfConfig":"32"},{"size":86,"mtime":1640591600291,"results":"45","hashOfConfig":"32"},{"size":6045,"mtime":1640591600291,"results":"46","hashOfConfig":"32"},{"size":426,"mtime":1640522781676,"results":"47","hashOfConfig":"32"},{"size":631,"mtime":1640591600368,"results":"48","hashOfConfig":"32"},{"size":7225,"mtime":1640591600291,"results":"49","hashOfConfig":"32"},{"size":7814,"mtime":1640591600291,"results":"50","hashOfConfig":"32"},{"size":1288,"mtime":1640344305177,"results":"51","hashOfConfig":"32"},{"size":670,"mtime":1640522765546,"results":"52","hashOfConfig":"32"},{"size":2276,"mtime":1640344325886,"results":"53","hashOfConfig":"32"},{"size":237,"mtime":1640344312428,"results":"54","hashOfConfig":"32"},{"size":136,"mtime":1640591600291,"results":"55","hashOfConfig":"32"},{"size":443,"mtime":1640591600291,"results":"56","hashOfConfig":"32"},{"size":2578,"mtime":1640522804923,"results":"57","hashOfConfig":"32"},{"size":4733,"mtime":1640591600363,"results":"58","hashOfConfig":"32"},{"size":26623,"mtime":1640591600290,"results":"59","hashOfConfig":"32"},{"size":1400,"mtime":1640591600291,"results":"60","hashOfConfig":"32"},{"size":1393,"mtime":1640522792619,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"7u8msu",{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\index.tsx",[],["130","131"],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reportWebVitals.js",[],["132","133"],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\app\\store.ts",["134"],"import { Action, configureStore, ThunkAction, MiddlewareArray } from '@reduxjs/toolkit'\r\nimport { createLogger } 'redux-logger';\r\nimport rootReducer from './rootReducer'\r\n\r\nconst logger = createLogger( {\r\n    predicate: () => process.env.NODE_ENV !== 'production',\r\n})\r\nconst store = configureStore ( {\r\n    devTools: process.env.NODE_ENV !== 'production',\r\nreducer: rootReducer,\r\nmiddleware: new MiddlewareArray ().concat(logger),\r\n})\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction< ReturnType, RootState, unknown, Action<string>>\r\nexport default store \r\n","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\App.tsx",["135","136","137","138"],"import React, { useState, useEffect } from 'react';\r\nimport 'scss/global.css';\r\nimport Staking from './features/Staking';\r\nimport MyLockedStaking from './features/MyLockedStaking';\r\nimport KingSpeedToKenContract from './contracts/KingSpeedStakingContac.json';\r\nimport StakingContract from './contracts/KingSpeedStakingContac.json';\r\nimport { useAppDispatch, useAppSelector } from './app/hooks';\r\nimport { selectAccount, setBalanceKSC, setTotalStakedAmount, setWeb3} from './reducers';\r\nimport { AbiItem } from 'web3-utils'\r\nimport { Box, Flex } from '@chakra-ui/react'\r\nimport { parseBalance } from './utils/Helper'\r\nimport ModalOverlay from './components/ModalOverlay'\r\nfunction App (){\r\n    const dispatch = useAppDispatch()\r\n    const { walletAddress, web3, isLoading } =  useAppDispatch(selectAccount)\r\n    const [selectTab, setSelectTab] = useState<'STAKE' | 'LOCKED'>('STAKE')\r\n\r\n    const handleClickTab = (type: 'STAKE' | 'LOCKED') => {\r\n        setSelectTab(type)\r\n    }\r\n\r\n    async function getAvailableKSCToken() {\r\n        const kingSpeedContract = new web3.eth.Contract(\r\n            KingSpeedToKenContract.abi as AbiItem[],\r\n            process.env.REACT_APP_KING_SPEED_TOKEN_CONTRACT\r\n        )\r\n\r\n        const balanceKSC = await kingSpeedContract.methods.balanceOf(walletAddress).call()\r\n        const convertBalanceKSC = parseBalance(balanceKSC)\r\n\r\n        dispatch(setBalanceKSC(convertBalanceKSC))\r\n    }\r\n\r\n    async function getTotalStaked() {\r\n        const stakingAddressContract = process.env.REACT_APP_STAKING_CONTRACT\r\n\r\n        const stakingContract = new web3.eth.Contract(\r\n            StakingContract.abi as AbiItem[],\r\n            stakingAddressContract\r\n        )\r\n\r\n        const stakedAmount = await stakingContract.methods.totalStakedAmount().call()\r\n        const convertAmount = parseBalance(stakedAmount)\r\n\r\n        dispatch(setTotalStakedAmount(convertAmount))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (walletAddress) {\r\n            getAvailableKSCToken()\r\n        }\r\n    }, [walletAddress])\r\n\r\n    useEffect(() => {\r\n        getTotalStaked()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Box mt=\"40px\" minW=\"1070px\" overflowX=\"scroll\">\r\n                <Flex alignItems=\"center\" justifyContent=\"center\">\r\n                    <Box\r\n                        textTransform=\"uppercase\"\r\n                        fontSize=\"18px\"\r\n                        lineHeight=\"50px\"\r\n                        padding=\"0 30px\"\r\n                        cursor=\"pointer\"\r\n                        fontWeight=\"700\"\r\n                        color={selectTab === 'STAKE' ? '#ffffff' : '#8d9fb9'}\r\n                        borderBottom={selectTab === 'STAKE' ? '1px solid #00aed6' : 'none'}\r\n                        onClick={() => handleClickTab('STAKE')}\r\n                    >\r\n                        Staking\r\n                    </Box>\r\n                    <Box\r\n                        textTransform=\"uppercase\"\r\n                        fontSize=\"18px\"\r\n                        lineHeight=\"50px\"\r\n                        padding=\"0 30px\"\r\n                        cursor=\"pointer\"\r\n                        fontWeight=\"700\"\r\n                        color={selectTab === 'LOCKED' ? '#ffffff' : '#8d9fb9'}\r\n                        borderBottom={selectTab === 'LOCKED' ? '1px solid #00aed6' : 'none'}\r\n                        onClick={() => handleClickTab('LOCKED')}\r\n                    >\r\n                        My Locked Staking\r\n                    </Box>\r\n                </Flex>\r\n\r\n                <Box\r\n                    padding={{ base: '20px 10px 10px', xl: '20px 30px 10px' }}\r\n                    borderRadius=\"10px\"\r\n                    border=\"1px solid rgba(0, 174, 214, 0.33)\"\r\n                >\r\n                    {selectTab === 'STAKE' ? <Staking /> : <MyLockedStaking />}\r\n                </Box>\r\n            </Box>\r\n\r\n            {isLoading && <ModalOverlay />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\layouts\\Layout.tsx",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\app\\hooks.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\Helper.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\MyLockedStaking.tsx",["139","140"],"import React, { useEffect, useState} from \"react\";\r\nimport { fromAscii } from \"web3-utils\";\r\nimport MyLocKedItem from \"./MyLockedItem\";\r\nimport {Table, Tr, Th, Tbody, TableCaption } from '@chakra-ui/react'\r\nimport StakingContract from '../contracts/KingSpeedStakingContac.json'\r\nimport styled from \"@emotion/styled\";\r\nimport { AbiItem } from \"web3-utils\";\r\nimport { selectAccount, setIsLoading } from \"../reducers\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport NoData from \"../components/NoData\";\r\n\r\nconst FIRST_RECORD = 0\r\nexport default function MyLockedStaking(){\r\n    const dispatch = useAppDispatch()\r\n    const { walletAddress, web3 } = useAppSelector(selectAccount)\r\n    const [stakes, setStakes] = useState([])\r\n\r\n    const THItem = styled(Th)`\r\n        padding: 10px;\r\n        font-size: 12px;\r\n        font-weight: 600;\r\n        text-transform: uppercase;\r\n        border-bottom: none;\r\n        font-family: inherit;\r\n        margin-left: 20px;\r\n        color: #8d9fb9;\r\n    `\r\n    useEffect(() => {\r\n        async function getUserStakeInfo() {\r\n            dispatch(setIsLoading(true))\r\n\r\n            try {\r\n                const stakingContract = new web3.eth.Contract(\r\n                    StakingContract.abi as AbiItem[],\r\n                    process.env.REACT_APP_STAKING_CONTRACT\r\n                )\r\n\r\n                const countLocked = await stakingContract.methods\r\n                    .totalStakerInfoByRelease(walletAddress, false)\r\n                    .call()\r\n\r\n                const countReleased = await stakingContract.methods\r\n                    .totalStakerInfoByRelease(walletAddress, true)\r\n                    .call()\r\n\r\n                const getStakeCount = parseInt(countLocked) + parseInt(countReleased) - 1\r\n                if (getStakeCount > 0) {\r\n                    await stakingContract.methods\r\n                        .getStakerInfo(\r\n                            walletAddress,\r\n                            FIRST_RECORD,\r\n                            parseInt(countLocked) + parseInt(countReleased) - 1\r\n                        )\r\n                        .call((err: any, res: any) => {\r\n                            if (err) {\r\n                                console.log(err)\r\n                                dispatch(setIsLoading(false))\r\n                                return\r\n                            }\r\n                            const listOfStaked = res.map((stake: any, indexStake: number) => {\r\n                                return {\r\n                                    ...stake,\r\n                                    indexStake,\r\n                                    isStaked: false\r\n                                }\r\n                            }).filter((stake: any) => !stake.isRelease)\r\n\r\n                            setStakes(listOfStaked ?? [])\r\n                            dispatch(setIsLoading(false))\r\n                        })\r\n                } else {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            } catch (error) {\r\n                dispatch(setIsLoading(false))\r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n        if (walletAddress) {\r\n            getUserStakeInfo()\r\n        }\r\n    }, [walletAddress])\r\n\r\n    const updateStaked = (indexStake: number) => {\r\n        const newStakes: any = stakes.slice() ?? []\r\n\r\n        setStakes(newStakes.map((stake: any) => {\r\n            if (stake.indexStake === indexStake) {\r\n                return {\r\n                    ...stake,\r\n                    isStaked: true\r\n                }\r\n            } else {\r\n                return stake\r\n            }\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <Table>\r\n            <Tr bgColor=\"#011921\" p=\"10px 100px\" borderRadius=\"3px\">\r\n                <THItem>Package</THItem>\r\n                <THItem>Total Amount</THItem>\r\n                <THItem w=\"160px\">APY</THItem>\r\n                <THItem>Stake Date</THItem>\r\n                <THItem>Locked Days</THItem>\r\n                <THItem>Interest End Date</THItem>\r\n                <THItem>Accrue Days</THItem>\r\n                <THItem>Estimated Interests</THItem>\r\n                <THItem></THItem>\r\n            </Tr>\r\n\r\n            {stakes.length > 0 ? (\r\n                <Tbody>\r\n                    {stakes.map((stake, index) => {\r\n                        return <MyLocKedItem key={index} stake={stake} updateStaked={updateStaked} />\r\n                    })}\r\n                </Tbody>\r\n            ) : (\r\n                <TableCaption>\r\n                    <NoData />\r\n                </TableCaption>\r\n            )}\r\n        </Table>\r\n    )\r\n}","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\ModalOverlay.tsx",["141"],"import React from \"react\";\r\nimport { Box, Flex, Spinner } from \"@chakra-ui/react\";\r\n\r\nexport default function ModalOverlay() {\r\n    return (\r\n        <Box\r\n            position=\"fixed\"\r\n            top=\"0\"\r\n            left=\"0\"\r\n            h=\"100%\"\r\n            w=\"100%\"\r\n            bg=\"rgba(0,0,0,0.6)\"\r\n            overflow=\"auto\"\r\n            transform=\"all 0.3s\"\r\n        >\r\n            <Box\r\n                position=\"absolute\"\r\n                left=\"50%\"\r\n                top=\"50%\"\r\n                transform=\"translate(-50%,-50%)\"\r\n                zIndex=\"1000\"\r\n            >\r\n                <Box textAlign=\"center\">\r\n                    <Spinner\r\n                        color=\"red.500\"\r\n                        size=\"lg\"\r\n                        thickness=\"4px\"\r\n                        emptyColor=\"#c3fb12\"\r\n                        speed=\"0.65s\"\r\n                    />\r\n                    <Box fontWeight=\"600\" fontSize=\"1.2rem\">\r\n                        Now loading ...\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\Staking.tsx",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\layouts\\AppHeader.tsx",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\Banner.tsx",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reducers\\index.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\MathCommon.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\_mocks_\\PackageData.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\hooks\\userInterval.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\NoData.tsx",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\MyLockedItem.tsx",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\PackageItem.tsx",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\ButtonConnectWallet.tsx",["142"],"import React from \"react\";\r\nimport { border, Box } from \"@chakra-ui/react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { connectWeb3Modal } from \"../connections/web3Modal\";\r\nexport default function ButtonConnectWallet() {\r\n    const BtnWallet = styled(Box)`\r\n    border: 2px solid #ffffff;\r\n    font-size: 19px;\r\n    font-weight: 600;\r\n        height: 37px;\r\n        line-height: 35px;\r\n        width: 192px;\r\n        text-align: center;s\r\n        background-color: transparent;\r\n        text-transform: uppercase;\r\n        text-align: center;\r\n        cursor: pointer;\r\n        transition: 0.5s;\r\n\r\n        /* box-shadow */\r\n        -webkit-box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 3px;\r\n        -moz-box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 3px;\r\n        box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 3px;\r\n        -webkit-transform: skew(-20deg);\r\n        -moz-transform: skew(-20deg);\r\n        -o-transform: skew(-20deg);\r\n    `\r\n    const Text = styled(Box)`\r\n        display: inline-block;\r\n        -webkit-transform: skew(20deg);\r\n        -moz-transform: skew(20deg);\r\n        -o-transform: skew(20deg);\r\n    `\r\nconst handleConnectWallet = async () =>{\r\n    connectWeb3Modal()\r\n}\r\nreturn(\r\n    <BtnWallet onClick={handleConnectWallet}>\r\n<Text>Connect Wallet</Text>\r\n    </BtnWallet>\r\n)\r\n}","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reducers\\action.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reducers\\reducer.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\reducers\\selector.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\DateFormat.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\Notification.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\accounts\\index.tsx",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\connections\\web3Modal.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\features\\StakeDetail.tsx",["143","144"],"import React, {useEffect, useState } from \"react\";\r\nimport { Box, Flex, Link, Image, SimpleGrid, Button } from '@chakra-ui/react'\r\nimport { numberFormat } from \"../utils/MathCommon\";\r\nimport { formatDateYYYYMMDDHHMMSS } from \"../utils/DateFormat\";\r\nimport dayjs from \"dayjs\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport useInterval  from '../hooks/userInterval'\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport { selectAccount, setBalanceKSC, setIsLoading, setTotalStakedAmount } from \"../reducers\";\r\nimport { AbiItem } from 'web3-utils'\r\nimport KingSpeedTokenContract from '../contracts/KingSpeedTokenContract.json'\r\nimport StakingContract from '../contracts/KingSpeedStakingContac.json'\r\nimport { ethers } from \"ethers\";\r\nimport AlertHashTransactioon from '../components/AlertHashTransation'\r\nimport { notification } from \"../utils/Notification\";\r\n\r\nconst UNLIMITED_KSC = 200000000\r\nconst PACKAGE_SILVER = 1\r\nconst PACKAGE_GOLD = 2\r\nconst PACKAGE_RUBY = 3\r\nconst PACKAGE_DIAMOND = 4\r\nconst OPTION_7_DAYS = 1\r\nconst OPTION_30_DAYS = 2\r\nconst OPTION_90_DAYS = 3\r\nconst OPTION_180_DAYS = 4\r\n\r\nconst URL_BUY_KSC =\r\n    'https://pancakeswap.finance/swap?outputCurrency=0x3ac0f8cecc1fb0ee6c2017a072d52e85b00c6694'\r\n\r\nexport default function StakeDetail({ option, packageItem }: any) {\r\n    const dispatch = useAppDispatch()\r\n    const { balanceKSC, totalStakedAmount, web3, walletAddress, isLoading } =\r\n        useAppSelector(selectAccount)\r\n\r\n    const [transactionInfo, setTransactionInfo] = useState({\r\n        transactionHash: '',\r\n        status: false,\r\n    })\r\n    const [allowanceAmount, setAllowanceAmount] = useState(0)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [disableConfirm, setDisableConfirm] = useState(false)\r\n\r\n    const [stakeAmount, setStakeAmount] = useState(packageItem.minStake)\r\n    const [stakeDate, setStakeDate] = useState(new Date())\r\n    const [totalStakedByOption, setTotalStakedByOption] = useState(0)\r\n\r\n    const poolLimit =\r\n        option?.poolLimit === UNLIMITED_KSC ? 'Unlimited' : `${numberFormat(option?.poolLimit)} KSC`\r\n\r\n    const percentPool =\r\n        option?.poolLimit !== UNLIMITED_KSC ? (totalStakedByOption / option?.poolLimit) * 100 : 0\r\n\r\n    useInterval(() => {\r\n        setStakeDate(new Date())\r\n    }, 1000)\r\n\r\n    const getAllowanceAmount = async () => {\r\n        try {\r\n            const kingSpeedContract = new web3.eth.Contract(\r\n                KingSpeedTokenContract.abi as AbiItem[],\r\n                process.env.REACT_APP_KING_SPEED_TOKEN_CONTRACT\r\n            )\r\n\r\n            await kingSpeedContract.methods.allowance(walletAddress, process.env.REACT_APP_STAKING_CONTRACT)\r\n                .call((err: any, res: any) => {\r\n                    if (err) {\r\n                        notification(\"Get amount allowance fail\", \"error\")\r\n                        return\r\n                    }\r\n                    if (res) {\r\n                        setAllowanceAmount(Number(ethers.utils.formatUnits(res, 18)))\r\n                    }\r\n                })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (walletAddress) {\r\n            getAllowanceAmount()\r\n        }\r\n    }, [walletAddress])\r\n\r\n    const handleStakeAmount = (values: any) => {\r\n        const { value } = values\r\n        setStakeAmount(value ? parseFloat(value) : 0)\r\n\r\n        setErrorMessage('')\r\n        setDisableConfirm(false)\r\n\r\n        if (parseFloat(value) > packageItem.maxStake) {\r\n            setDisableConfirm(true)\r\n            setErrorMessage(\r\n                `The stake amount can not be higher than ${numberFormat(\r\n                    packageItem.maxStake\r\n                )} maximum KSC of ${packageItem.name} package`\r\n            )\r\n            return\r\n        }\r\n\r\n        if (parseFloat(value) > balanceKSC) {\r\n            setDisableConfirm(true)\r\n            setErrorMessage('The stake amount can not be higher than the available amount')\r\n            return\r\n        }\r\n\r\n        if (parseFloat(value) < packageItem.minStake) {\r\n            setDisableConfirm(true)\r\n            setErrorMessage(\r\n                `The stake amount can not be lower than ${numberFormat(\r\n                    packageItem.minStake\r\n                )} KSC`\r\n            )\r\n            return\r\n        }\r\n    }\r\n\r\n    const handleMaxKSC = () => {\r\n        if (balanceKSC >= packageItem.maxStake) {\r\n            setStakeAmount(packageItem.maxStake)\r\n        } else {\r\n            setStakeAmount(balanceKSC)\r\n        }\r\n    }\r\n\r\n    const approve = async () => {\r\n        if (balanceKSC < packageItem.minStake) {\r\n            notification(\"Your KSC balance is insufficient to approve \", \"error\")\r\n            return\r\n        }\r\n\r\n        try {\r\n            const kingSpeedContract = new web3.eth.Contract(\r\n                KingSpeedTokenContract.abi as AbiItem[],\r\n                process.env.REACT_APP_KING_SPEED_TOKEN_CONTRACT\r\n            )\r\n\r\n            await kingSpeedContract.methods\r\n                .approve(\r\n                    process.env.REACT_APP_STAKING_CONTRACT,\r\n                    web3.utils.toWei(balanceKSC.toString(), 'ether')\r\n                )\r\n                .send({\r\n                    from: walletAddress,\r\n                }).on('receipt', (receipt: any) => {\r\n                    if (receipt.status) {\r\n                        setTransactionInfo({ transactionHash: receipt?.transactionHash, status: true })\r\n                        notification(\"An Approve has been successfully\", \"success\")\r\n                    } else {\r\n                        if (receipt?.transactionHash) {\r\n                            setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                        }\r\n                        notification(\"An approval has failed\", \"error\")\r\n                    }\r\n                })\r\n                .on('error', (error: any, receipt: any) => {\r\n                    if (receipt?.transactionHash) {\r\n                        setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                    }\r\n                    notification(\"An approval has failed\", \"error\")\r\n                })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const updateData = (stakeAmount: number) => {\r\n        notification('Congratulation, you have staked successfully', 'success')\r\n        setStakeAmount(packageItem.minStake)\r\n        dispatch(setBalanceKSC(balanceKSC - stakeAmount))\r\n        dispatch(setTotalStakedAmount(totalStakedAmount + stakeAmount))\r\n        dispatch(setIsLoading(false))\r\n    }\r\n\r\n    const deposit = async () => {\r\n        const stakingContract = new web3.eth.Contract(\r\n            StakingContract.abi as AbiItem[],\r\n            process.env.REACT_APP_STAKING_CONTRACT\r\n        )\r\n\r\n        if (option.id === OPTION_7_DAYS) {\r\n            await stakingContract.methods\r\n                .oneWeekStake(web3.utils.toWei(stakeAmount.toString(), 'ether'))\r\n                .send({ from: walletAddress })\r\n                .on('receipt', async (receipt: any) => {\r\n                    if (receipt.status) {\r\n                        setTransactionInfo({\r\n                            transactionHash: receipt?.transactionHash,\r\n                            status: true,\r\n                        })\r\n                        getAllowanceAmount()\r\n                        updateData(stakeAmount)\r\n                    } else {\r\n                        if (receipt?.transactionHash) {\r\n                            setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                        }\r\n                        notification(\"The transaction is failed\", \"error\")\r\n                    }\r\n                })\r\n                .on('error', function (error: any, receipt: any) {\r\n                    if (receipt?.transactionHash) {\r\n                        setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                    }\r\n                    notification('The transaction is failed', 'error')\r\n                })\r\n        }\r\n\r\n        if (option.id === OPTION_30_DAYS) {\r\n            await stakingContract.methods\r\n                .oneMonthStake(web3.utils.toWei(stakeAmount.toString(), 'ether'))\r\n                .send({ from: walletAddress })\r\n                .on('receipt', async (receipt: any) => {\r\n                    if (receipt.status) {\r\n                        setTransactionInfo({\r\n                            transactionHash: receipt?.transactionHash,\r\n                            status: true,\r\n                        })\r\n                        getAllowanceAmount()\r\n                        updateData(stakeAmount)\r\n                    } else {\r\n                        if (receipt?.transactionHash) {\r\n                            setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                        }\r\n                        notification(\"The transaction is failed\", \"error\")\r\n                    }\r\n                })\r\n                .on('error', function (error: any, receipt: any) {\r\n                    if (receipt?.transactionHash) {\r\n                        setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                    }\r\n                    notification('The transaction is failed', 'error')\r\n                })\r\n        }\r\n\r\n        if (option.id === OPTION_90_DAYS) {\r\n            await stakingContract.methods\r\n                .threeMonthStake(web3.utils.toWei(stakeAmount.toString(), 'ether'))\r\n                .send({ from: walletAddress })\r\n                .on('receipt', async (receipt: any) => {\r\n                    if (receipt.status) {\r\n                        setTransactionInfo({\r\n                            transactionHash: receipt?.transactionHash,\r\n                            status: true,\r\n                        })\r\n                        getAllowanceAmount()\r\n                        updateData(stakeAmount)\r\n                    } else {\r\n                        if (receipt?.transactionHash) {\r\n                            setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                        }\r\n                        notification(\"The transaction is failed\", \"error\")\r\n                    }\r\n                })\r\n                .on('error', function (error: any, receipt: any) {\r\n                    if (receipt?.transactionHash) {\r\n                        setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                    }\r\n                    notification('The transaction is failed', 'error')\r\n                })\r\n        }\r\n\r\n        if (option.id === OPTION_180_DAYS) {\r\n            await stakingContract.methods\r\n                .sixMonthStake(web3.utils.toWei(stakeAmount.toString(), 'ether'))\r\n                .send({ from: walletAddress })\r\n                .on('receipt', async (receipt: any) => {\r\n                    if (receipt.status) {\r\n                        setTransactionInfo({\r\n                            transactionHash: receipt?.transactionHash,\r\n                            status: true,\r\n                        })\r\n                        getAllowanceAmount()\r\n                        updateData(stakeAmount)\r\n                    } else {\r\n                        if (receipt?.transactionHash) {\r\n                            setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                        }\r\n                        notification(\"The transaction is failed\", \"error\")\r\n                    }\r\n                })\r\n                .on('error', function (error: any, receipt: any) {\r\n                    if (receipt?.transactionHash) {\r\n                        setTransactionInfo({ transactionHash: receipt?.transactionHash, status: false })\r\n                    }\r\n                    notification('The transaction is failed', 'error')\r\n                })\r\n        }\r\n    }\r\n\r\n    const formatDataStaked = (amount: string) => {\r\n        return Number(ethers.utils.formatUnits(amount, 18)) ?? 0\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDetailStakedPool()\r\n        closeTransactionHash()\r\n    }, [packageItem, option])\r\n\r\n    const getDetailStakedPool = async () => {\r\n        const stakingContract = new web3.eth.Contract(\r\n            StakingContract.abi as AbiItem[],\r\n            process.env.REACT_APP_STAKING_CONTRACT\r\n        )\r\n        await stakingContract.methods.getDetailStakedPool().call((err: any, res: any) => {\r\n            if (err) {\r\n                console.log(err)\r\n                return\r\n            }\r\n            const adjacencyMatrix = res\r\n\r\n            if (option.id === OPTION_7_DAYS) {\r\n                const option7Days = adjacencyMatrix[0]\r\n\r\n                if (packageItem.id === PACKAGE_SILVER) {\r\n                    setTotalStakedByOption(formatDataStaked(option7Days[0]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_GOLD) {\r\n                    setTotalStakedByOption(formatDataStaked(option7Days[1]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_RUBY) {\r\n                    setTotalStakedByOption(formatDataStaked(option7Days[2]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_DIAMOND) {\r\n                    setTotalStakedByOption(formatDataStaked(option7Days[3]))\r\n                }\r\n            }\r\n\r\n            if (option.id === OPTION_30_DAYS) {\r\n                const option30Days = adjacencyMatrix[1]\r\n\r\n                if (packageItem.id === PACKAGE_SILVER) {\r\n                    setTotalStakedByOption(formatDataStaked(option30Days[0]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_GOLD) {\r\n                    setTotalStakedByOption(formatDataStaked(option30Days[1]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_RUBY) {\r\n                    setTotalStakedByOption(formatDataStaked(option30Days[2]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_DIAMOND) {\r\n                    setTotalStakedByOption(formatDataStaked(option30Days[3]))\r\n                }\r\n            }\r\n\r\n            if (option.id === OPTION_90_DAYS) {\r\n                const option90Days = adjacencyMatrix[2]\r\n\r\n                if (packageItem.id === PACKAGE_SILVER) {\r\n                    setTotalStakedByOption(formatDataStaked(option90Days[0]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_GOLD) {\r\n                    setTotalStakedByOption(formatDataStaked(option90Days[1]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_RUBY) {\r\n                    setTotalStakedByOption(formatDataStaked(option90Days[2]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_DIAMOND) {\r\n                    setTotalStakedByOption(formatDataStaked(option90Days[3]))\r\n                }\r\n            }\r\n\r\n            if (option.id === OPTION_180_DAYS) {\r\n                const option180Days = adjacencyMatrix[3]\r\n\r\n                if (packageItem.id === PACKAGE_SILVER) {\r\n                    setTotalStakedByOption(formatDataStaked(option180Days[0]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_GOLD) {\r\n                    setTotalStakedByOption(formatDataStaked(option180Days[1]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_RUBY) {\r\n                    setTotalStakedByOption(formatDataStaked(option180Days[2]))\r\n                }\r\n\r\n                if (packageItem.id === PACKAGE_DIAMOND) {\r\n                    setTotalStakedByOption(formatDataStaked(option180Days[3]))\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const isCheckApprove = () => {\r\n        return allowanceAmount < stakeAmount\r\n    }\r\n\r\n    const handleConfirmStake = async () => {\r\n        dispatch(setIsLoading(true))\r\n        try {\r\n            if (isCheckApprove()) {\r\n                await approve()\r\n            }\r\n            await deposit()\r\n        } catch (error) {\r\n            dispatch(setIsLoading(false))\r\n        }\r\n    }\r\n\r\n    const calculateRate = () => {\r\n        return (option.rate * option.duration * stakeAmount) / (365 * 100)\r\n    }\r\n\r\n    const isDisable = () => {\r\n        return balanceKSC < packageItem.minStake || totalStakedByOption > option.poolLimit\r\n    }\r\n\r\n    const closeTransactionHash = () => {\r\n        setTransactionInfo({\r\n            transactionHash: '',\r\n            status: false,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Box padding=\"20px 0\" maxW=\"670px\" margin=\"0 auto\">\r\n            <Box\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                padding=\"10px 20px\"\r\n                borderStyle=\"solid\"\r\n                borderWidth=\"0.6px\"\r\n                borderRadius=\"5px\"\r\n                background=\"linear-gradient(to left, rgba(3, 170, 20, 0.46), rgba(0, 174, 214, 0.12))\"\r\n            >\r\n                <Box>\r\n                    <Box fontSize=\"12px\" fontWeight=\"600\">\r\n                        Total Staked\r\n                    </Box>\r\n                    <Box mt=\"6px\" fontSize=\"20px\" color=\"#ffab00\" fontWeight=\"700\">\r\n                        {numberFormat(totalStakedByOption)} KSC\r\n                    </Box>\r\n                </Box>\r\n                <Box textAlign=\"right\">\r\n                    <Box color=\"#8d9fb9\" fontSize=\"12px\" fontWeight=\"600\" textTransform=\"uppercase\">\r\n                        Pool Limit\r\n                    </Box>\r\n                    <Box\r\n                        w=\"200px\"\r\n                        display=\"flex\"\r\n                        justifyContent={\r\n                            option?.poolLimit === UNLIMITED_KSC ? 'flex-end' : 'space-between'\r\n                        }\r\n                        fontSize=\"16px\"\r\n                        fontWeight=\"600\"\r\n                        mt=\"5px\"\r\n                    >\r\n                        {option?.poolLimit !== UNLIMITED_KSC && (\r\n                            <Box>{percentPool?.toFixed(2)}%</Box>\r\n                        )}\r\n                        <Box className=\"amount\">{poolLimit}</Box>\r\n                    </Box>\r\n                    {option?.poolLimit !== UNLIMITED_KSC && (\r\n                        <Box\r\n                            fontSize=\"21px\"\r\n                            lineHeight=\"33px\"\r\n                            textTransform=\"uppercase\"\r\n                            borderRadius=\"2px\"\r\n                            flex=\"1\"\r\n                            mt=\"10px\"\r\n                            borderBottom=\"7px solid rgb(0, 174, 214, 0.16)\"\r\n                            className=\"progress\"\r\n                        >\r\n                            <Box\r\n                                w={percentPool}\r\n                                borderRadius=\"3px\"\r\n                                borderBottom=\"7px solid #ffffff\"\r\n                                mb=\"-7px\"\r\n                                className=\"progress-detail\"\r\n                            ></Box>\r\n                        </Box>\r\n                    )}\r\n                </Box>\r\n            </Box>\r\n\r\n            <SimpleGrid columns={2} spacing={16} mt=\"20px\">\r\n                <Box>\r\n                    <Flex justify=\"space-between\" align=\"center\">\r\n                        <Box fontSize=\"22px\" fontWeight=\"700\" color=\"#c3fb12\">\r\n                            STAKE\r\n                        </Box>\r\n                        <Link href={URL_BUY_KSC} isExternal>\r\n                            <Flex align=\"center\" justify=\"flex-end\" cursor=\"pointer\">\r\n                                <Box\r\n                                    color=\"#21c186\"\r\n                                    fontSize=\"14px\"\r\n                                    mt=\"3px\"\r\n                                    fontWeight=\"700\"\r\n                                    mr=\"10px\"\r\n                                >\r\n                                    Buy KSC\r\n                                </Box>\r\n\r\n                                <Image src=\"./icon/icon-buy.svg\" alt=\"icon-buy\" />\r\n                            </Flex>\r\n                        </Link>\r\n                    </Flex>\r\n                    <Flex justify=\"space-between\" alignItems=\"center\" mt=\"10px\">\r\n                        <Box fontSize=\"14px\">Stake amount</Box>\r\n                        <Box fontSize=\"14px\">Available amount: {numberFormat(balanceKSC)} KSC</Box>\r\n                    </Flex>\r\n                    <Box\r\n                        border={\r\n                            balanceKSC < packageItem.minStake || disableConfirm\r\n                                ? '1px solid #ee2737'\r\n                                : '1px solid #003947'\r\n                        }\r\n                        borderRadius={4}\r\n                        mt=\"5px\"\r\n                        p=\"5px 10px\"\r\n                    >\r\n                        <Flex justify=\"space-between\" align=\"center\">\r\n                            <NumberFormat\r\n                                style={{\r\n                                    backgroundColor: '#000000',\r\n                                }}\r\n                                value={stakeAmount}\r\n                                min={packageItem.minStake}\r\n                                max={packageItem.maxStake}\r\n                                thousandSeparator={true}\r\n                                decimalScale={4}\r\n                                allowNegative={false}\r\n                                disabled={isLoading || isDisable()}\r\n                                onValueChange={(values) => handleStakeAmount(values)}\r\n                            />\r\n                            <Flex justify=\"center\" align=\"center\">\r\n                                <Box as=\"span\" fontWeight=\"600\" fontSize=\"20px\">\r\n                                    KSC\r\n                                </Box>\r\n                                <Box\r\n                                    padding=\"5px 10px\"\r\n                                    fontWeight=\"600\"\r\n                                    fontSize=\"16px\"\r\n                                    color=\"#21c186\"\r\n                                    background=\"rgba(33, 193, 134, 0.19)\"\r\n                                    borderRadius=\"5px\"\r\n                                    cursor=\"pointer\"\r\n                                    ml={4}\r\n                                    onClick={handleMaxKSC}\r\n                                >\r\n                                    Max\r\n                                </Box>\r\n                            </Flex>\r\n                        </Flex>\r\n                    </Box>\r\n\r\n                    {errorMessage && (\r\n                        <Box color=\"#ee2737\" fontSize=\"13px\" mt=\"10px\" fontWeight=\"600\">\r\n                            {errorMessage}\r\n                        </Box>\r\n                    )}\r\n\r\n                    {balanceKSC < packageItem.minStake && (\r\n                        <Box color=\"#ee2737\" fontSize=\"13px\" mt=\"10px\" fontWeight=\"600\">\r\n                            {`The available amount can not be lower than ${numberFormat(\r\n                                packageItem.minStake\r\n                            )} KSC`}\r\n                        </Box>\r\n                    )}\r\n\r\n                    {transactionInfo.transactionHash && (\r\n                        <Box mt=\"10px\">\r\n                            <AlertHashTransactioon\r\n                                transactionInfo={transactionInfo}\r\n                                closeTransactionHash={closeTransactionHash}\r\n                            />\r\n                        </Box>\r\n                    )}\r\n                </Box>\r\n                <Box className=\"stake-info\">\r\n                    <Box fontSize=\"18px\" fontWeight=\"600\">\r\n                        SUMMARY\r\n                    </Box>\r\n                    <Flex alignItems=\"center\" justify=\"space-between\" mt=\"5px\">\r\n                        <Box fontSize=\"16px\">Stake Date</Box>\r\n                        <Box fontSize=\"16px\">{formatDateYYYYMMDDHHMMSS(stakeDate)}</Box>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\" justify=\"space-between\" mt=\"5px\">\r\n                        <Box fontSize=\"16px\">Interest End Date</Box>\r\n                        <Box fontSize=\"16px\">\r\n                            {formatDateYYYYMMDDHHMMSS(dayjs(stakeDate).add(option.duration, 'day'))}\r\n                        </Box>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\" justify=\"space-between\" mt=\"5px\">\r\n                        <Box fontSize=\"16px\">Withdrawal Delay Time</Box>\r\n                        <Box fontSize=\"16px\">None</Box>\r\n                    </Flex>\r\n\r\n                    <Box border=\"1px solid rgba(0, 174, 214, 0.33)\" mt=\"10px\" mb=\"10px\"></Box>\r\n\r\n                    <Flex alignItems=\"center\" justify=\"space-between\" mt=\"5px\">\r\n                        <Box fontSize=\"16px\" fontWeight=\"700\" color=\"white\">\r\n                            APY\r\n                        </Box>\r\n                        <Box fontSize=\"16px\" fontWeight=\"700\" color=\"white\">\r\n                            {option.rateDisplay}%\r\n                        </Box>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\" justify=\"space-between\" mt=\"5px\">\r\n                        <Box fontSize=\"16px\" fontWeight=\"700\" color=\"white\">\r\n                            Estimated Interests\r\n                        </Box>\r\n                        <Box fontSize=\"16px\" fontWeight=\"700\" color=\"white\">\r\n                            {calculateRate().toFixed(3)} KSC\r\n                        </Box>\r\n                    </Flex>\r\n                    <Button\r\n                        onClick={handleConfirmStake}\r\n                        color=\"#000000\"\r\n                        fontWeight=\"700\"\r\n                        background=\"#ffab00\"\r\n                        mt=\"10px\"\r\n                        isLoading={isLoading}\r\n                        disabled={isDisable() || disableConfirm || isLoading}\r\n                        loadingText=\"Loading\"\r\n                        fontSize=\"20px\"\r\n                        p=\"20px 100px\"\r\n                        w=\"100%\"\r\n                        _hover={{\r\n                            color: '#000000',\r\n                            background: '#ffab00',\r\n                        }}\r\n                    >\r\n                        Confirm\r\n                    </Button>\r\n                </Box>\r\n            </SimpleGrid>\r\n        </Box>\r\n    )\r\n}","D:\\visuacode\\code-kingspeed\\kingspeed\\src\\utils\\getWeb3List.ts",[],"D:\\visuacode\\code-kingspeed\\kingspeed\\src\\components\\AlertHashTransation.tsx",[],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":null,"fatal":true,"severity":2,"message":"149","line":2,"column":24},{"ruleId":"150","severity":1,"message":"151","line":7,"column":26,"nodeType":"152","messageId":"153","endLine":7,"endColumn":40},{"ruleId":"150","severity":1,"message":"154","line":8,"column":62,"nodeType":"152","messageId":"153","endLine":8,"endColumn":69},{"ruleId":"155","severity":1,"message":"156","line":52,"column":8,"nodeType":"157","endLine":52,"endColumn":23,"suggestions":"158"},{"ruleId":"155","severity":1,"message":"159","line":56,"column":8,"nodeType":"157","endLine":56,"endColumn":10,"suggestions":"160"},{"ruleId":"150","severity":1,"message":"161","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":19},{"ruleId":"155","severity":1,"message":"162","line":83,"column":8,"nodeType":"157","endLine":83,"endColumn":23,"suggestions":"163"},{"ruleId":"150","severity":1,"message":"164","line":2,"column":15,"nodeType":"152","messageId":"153","endLine":2,"endColumn":19},{"ruleId":"150","severity":1,"message":"165","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":16},{"ruleId":"155","severity":1,"message":"166","line":83,"column":8,"nodeType":"157","endLine":83,"endColumn":23,"suggestions":"167"},{"ruleId":"155","severity":1,"message":"168","line":298,"column":8,"nodeType":"157","endLine":298,"endColumn":29,"suggestions":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"Parsing error: 'from' expected.","@typescript-eslint/no-unused-vars","'useAppSelector' is defined but never used.","Identifier","unusedVar","'setWeb3' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAvailableKSCToken'. Either include it or remove the dependency array.","ArrayExpression",["172"],"React Hook useEffect has a missing dependency: 'getTotalStaked'. Either include it or remove the dependency array.",["173"],"'fromAscii' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'web3.eth.Contract'. Either include them or remove the dependency array.",["174"],"'Flex' is defined but never used.","'border' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllowanceAmount'. Either include it or remove the dependency array.",["175"],"React Hook useEffect has a missing dependency: 'getDetailStakedPool'. Either include it or remove the dependency array.",["176"],"no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},"Update the dependencies array to be: [getAvailableKSCToken, walletAddress]",{"range":"187","text":"188"},"Update the dependencies array to be: [getTotalStaked]",{"range":"189","text":"190"},"Update the dependencies array to be: [dispatch, walletAddress, web3.eth.Contract]",{"range":"191","text":"192"},"Update the dependencies array to be: [getAllowanceAmount, walletAddress]",{"range":"193","text":"194"},"Update the dependencies array to be: [packageItem, option, getDetailStakedPool]",{"range":"195","text":"196"},[2019,2034],"[getAvailableKSCToken, walletAddress]",[2095,2097],"[getTotalStaked]",[3243,3258],"[dispatch, walletAddress, web3.eth.Contract]",[3255,3270],"[getAllowanceAmount, walletAddress]",[12318,12339],"[packageItem, option, getDetailStakedPool]"]