{"ast":null,"code":"var _jsxFileName = \"D:\\\\visuacode\\\\code-kingspeed\\\\kingspeed\\\\src\\\\features\\\\MyLockedStaking.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport MyLocKedItem from \"./MyLockedItem\";\nimport { Table, Tr, Th, Tbody, TableCaption } from '@chakra-ui/react';\nimport StakingContract from '../contracts/KingSpeedStakingContac.json';\nimport styled from \"@emotion/styled\";\nimport { selectAccount, setIsLoading } from \"../reducers\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport NoData from \"../components/NoData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FIRST_RECORD = 0;\nexport default function MyLockedStaking() {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    walletAddress,\n    web3\n  } = useAppSelector(selectAccount);\n  const [stakes, setStakes] = useState([]);\n  const THItem = styled(Th)`\n        padding: 10px;\n        font-size: 12px;\n        font-weight: 600;\n        text-transform: uppercase;\n        border-bottom: none;\n        font-family: inherit;\n        margin-left: 20px;\n        color: #8d9fb9;\n    `;\n  useEffect(() => {\n    async function getUserStakeInfo() {\n      dispatch(setIsLoading(true));\n\n      try {\n        const stakingContract = new web3.eth.Contract(StakingContract.abi, process.env.REACT_APP_STAKING_CONTRACT);\n        const countLocked = await stakingContract.methods.totalStakerInfoByRelease(walletAddress, false).call();\n        const countReleased = await stakingContract.methods.totalStakerInfoByRelease(walletAddress, true).call();\n        const getStakeCount = parseInt(countLocked) + parseInt(countReleased) - 1;\n\n        if (getStakeCount > 0) {\n          await stakingContract.methods.getStakerInfo(walletAddress, FIRST_RECORD, parseInt(countLocked) + parseInt(countReleased) - 1).call((err, res) => {\n            if (err) {\n              console.log(err);\n              dispatch(setIsLoading(false));\n              return;\n            }\n\n            const listOfStaked = res.map((stake, indexStake) => {\n              return { ...stake,\n                indexStake,\n                isStaked: false\n              };\n            }).filter(stake => !stake.isRelease);\n            setStakes(listOfStaked !== null && listOfStaked !== void 0 ? listOfStaked : []);\n            dispatch(setIsLoading(false));\n          });\n        } else {\n          dispatch(setIsLoading(false));\n        }\n      } catch (error) {\n        dispatch(setIsLoading(false));\n        console.log(error);\n      }\n    }\n\n    if (walletAddress) {\n      getUserStakeInfo();\n    }\n  }, [walletAddress]);\n\n  const updateStaked = indexStake => {\n    var _stakes$slice;\n\n    const newStakes = (_stakes$slice = stakes.slice()) !== null && _stakes$slice !== void 0 ? _stakes$slice : [];\n    setStakes(newStakes.map(stake => {\n      if (stake.indexStake === indexStake) {\n        return { ...stake,\n          isStaked: true\n        };\n      } else {\n        return stake;\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    children: [/*#__PURE__*/_jsxDEV(Tr, {\n      bgColor: \"#011921\",\n      p: \"10px 100px\",\n      borderRadius: \"3px\",\n      children: [/*#__PURE__*/_jsxDEV(THItem, {\n        children: \"Package\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(THItem, {\n        children: \"Total Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(THItem, {\n        w: \"160px\",\n        children: \"APY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(THItem, {\n        children: \"Stake Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(THItem, {\n        children: \"Locked Days\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(THItem, {\n        children: \"Interest End Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(THItem, {\n        children: \"Accrue Days\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(THItem, {\n        children: \"Estimated Interests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(THItem, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), stakes.length > 0 ? /*#__PURE__*/_jsxDEV(Tbody, {\n      children: stakes.map((stake, index) => {\n        return /*#__PURE__*/_jsxDEV(MyLocKedItem, {\n          stake: stake,\n          updateStaked: updateStaked\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(TableCaption, {\n      children: /*#__PURE__*/_jsxDEV(NoData, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MyLockedStaking, \"PeOqbknU/40wbQUiZN3i3klYX3Y=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n\n_c = MyLockedStaking;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyLockedStaking\");","map":{"version":3,"sources":["D:/visuacode/code-kingspeed/kingspeed/src/features/MyLockedStaking.tsx"],"names":["React","useEffect","useState","MyLocKedItem","Table","Tr","Th","Tbody","TableCaption","StakingContract","styled","selectAccount","setIsLoading","useAppDispatch","useAppSelector","NoData","FIRST_RECORD","MyLockedStaking","dispatch","walletAddress","web3","stakes","setStakes","THItem","getUserStakeInfo","stakingContract","eth","Contract","abi","process","env","REACT_APP_STAKING_CONTRACT","countLocked","methods","totalStakerInfoByRelease","call","countReleased","getStakeCount","parseInt","getStakerInfo","err","res","console","log","listOfStaked","map","stake","indexStake","isStaked","filter","isRelease","error","updateStaked","newStakes","slice","length","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from \"react\";\r\nimport { fromAscii } from \"web3-utils\";\r\nimport MyLocKedItem from \"./MyLockedItem\";\r\nimport {Table, Tr, Th, Tbody, TableCaption } from '@chakra-ui/react'\r\nimport StakingContract from '../contracts/KingSpeedStakingContac.json'\r\nimport styled from \"@emotion/styled\";\r\nimport { AbiItem } from \"web3-utils\";\r\nimport { selectAccount, setIsLoading } from \"../reducers\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport NoData from \"../components/NoData\";\r\n\r\nconst FIRST_RECORD = 0\r\nexport default function MyLockedStaking(){\r\n    const dispatch = useAppDispatch()\r\n    const { walletAddress, web3 } = useAppSelector(selectAccount)\r\n    const [stakes, setStakes] = useState([])\r\n\r\n    const THItem = styled(Th)`\r\n        padding: 10px;\r\n        font-size: 12px;\r\n        font-weight: 600;\r\n        text-transform: uppercase;\r\n        border-bottom: none;\r\n        font-family: inherit;\r\n        margin-left: 20px;\r\n        color: #8d9fb9;\r\n    `\r\n    useEffect(() => {\r\n        async function getUserStakeInfo() {\r\n            dispatch(setIsLoading(true))\r\n\r\n            try {\r\n                const stakingContract = new web3.eth.Contract(\r\n                    StakingContract.abi as AbiItem[],\r\n                    process.env.REACT_APP_STAKING_CONTRACT\r\n                )\r\n\r\n                const countLocked = await stakingContract.methods\r\n                    .totalStakerInfoByRelease(walletAddress, false)\r\n                    .call()\r\n\r\n                const countReleased = await stakingContract.methods\r\n                    .totalStakerInfoByRelease(walletAddress, true)\r\n                    .call()\r\n\r\n                const getStakeCount = parseInt(countLocked) + parseInt(countReleased) - 1\r\n                if (getStakeCount > 0) {\r\n                    await stakingContract.methods\r\n                        .getStakerInfo(\r\n                            walletAddress,\r\n                            FIRST_RECORD,\r\n                            parseInt(countLocked) + parseInt(countReleased) - 1\r\n                        )\r\n                        .call((err: any, res: any) => {\r\n                            if (err) {\r\n                                console.log(err)\r\n                                dispatch(setIsLoading(false))\r\n                                return\r\n                            }\r\n                            const listOfStaked = res.map((stake: any, indexStake: number) => {\r\n                                return {\r\n                                    ...stake,\r\n                                    indexStake,\r\n                                    isStaked: false\r\n                                }\r\n                            }).filter((stake: any) => !stake.isRelease)\r\n\r\n                            setStakes(listOfStaked ?? [])\r\n                            dispatch(setIsLoading(false))\r\n                        })\r\n                } else {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            } catch (error) {\r\n                dispatch(setIsLoading(false))\r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n        if (walletAddress) {\r\n            getUserStakeInfo()\r\n        }\r\n    }, [walletAddress])\r\n\r\n    const updateStaked = (indexStake: number) => {\r\n        const newStakes: any = stakes.slice() ?? []\r\n\r\n        setStakes(newStakes.map((stake: any) => {\r\n            if (stake.indexStake === indexStake) {\r\n                return {\r\n                    ...stake,\r\n                    isStaked: true\r\n                }\r\n            } else {\r\n                return stake\r\n            }\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <Table>\r\n            <Tr bgColor=\"#011921\" p=\"10px 100px\" borderRadius=\"3px\">\r\n                <THItem>Package</THItem>\r\n                <THItem>Total Amount</THItem>\r\n                <THItem w=\"160px\">APY</THItem>\r\n                <THItem>Stake Date</THItem>\r\n                <THItem>Locked Days</THItem>\r\n                <THItem>Interest End Date</THItem>\r\n                <THItem>Accrue Days</THItem>\r\n                <THItem>Estimated Interests</THItem>\r\n                <THItem></THItem>\r\n            </Tr>\r\n\r\n            {stakes.length > 0 ? (\r\n                <Tbody>\r\n                    {stakes.map((stake, index) => {\r\n                        return <MyLocKedItem key={index} stake={stake} updateStaked={updateStaked} />\r\n                    })}\r\n                </Tbody>\r\n            ) : (\r\n                <TableCaption>\r\n                    <NoData />\r\n                </TableCaption>\r\n            )}\r\n        </Table>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}