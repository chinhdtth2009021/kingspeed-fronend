{"ast":null,"code":"import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport store from \"../app/store\";\nimport { logout, setWalletAddress, setChainId, setBalanceBNB, setWeb3 } from \"../reducers\";\nimport { getWeb3 } from \"../utils/getWeb3List\";\nimport { parseBalance } from \"../utils/Helper\";\nimport { notification } from \"../utils/Notification\";\nimport Web3 from \"web3\";\nimport { numberToHex } from \"web3-utils\";\nimport Web3Modal from 'web3modal';\nconst rpcSupport = {\n  97: 'https://data-seed-prebsc-2-s1.binance.org:8545/',\n  56: 'https://bsc-dataseed.binance.org/'\n};\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider\n  }\n};\nconst paramsSwitchNetwork = {\n  56: [{\n    chainId: '0x38',\n    chainName: 'BSC - Mainnet',\n    nativeCurrency: {\n      name: 'BNB',\n      symbol: 'BNB',\n      decimals: 18\n    },\n    rpcUrls: ['https://bsc-dataseed.binance.org/'],\n    blockExplorerUrls: ['https://bscscan.com/']\n  }],\n  97: [{\n    chainId: '0x61',\n    chainName: 'BSC - Testnet',\n    nativeCurrency: {\n      name: 'BNB',\n      symbol: 'BNB',\n      decimals: 18\n    },\n    rpcUrls: ['https://data-seed-prebsc-2-s1.binance.org:8545/'],\n    blockExplorerUrls: ['https://testnet.bscscan.com/']\n  }]\n};\nexport const selectChain = async (chainId, walletAddress) => {\n  if (!!rpcSupport[chainId]) {\n    if (!!walletAddress) {\n      injectNetworkNoEthereum(chainId);\n    } else {\n      const {\n        web3Procider\n      } = getWeb3(chainId);\n      store.dispatch(setWeb3(web3Procider));\n    }\n\n    store.dispatch(setChainId(chainId));\n  } else {\n    notification('KingSpeed does nott support this network', 'warning');\n  }\n};\nexport const injectNetworkEthereum = async chainId => {\n  if (window.ethereum) {\n    var _window$ethereum;\n\n    await ((_window$ethereum = window.ethereum) === null || _window$ethereum === void 0 ? void 0 : _window$ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: numberToHex(chainId)\n      }]\n    }));\n  } else {\n    notification('Metamask is not installed', 'warning');\n  }\n};\nexport const injectNetworkNoEthereum = async chainId => {\n  if (window.ethereum) {\n    var _window$ethereum2;\n\n    await ((_window$ethereum2 = window.ethereum) === null || _window$ethereum2 === void 0 ? void 0 : _window$ethereum2.request({\n      method: 'wall_addEthereumChain',\n      params: paramsSwitchNetwork[chainId]\n    }));\n  } else {\n    notification('Metamask is not installed', 'warning');\n  }\n};\nexport const connectWeb3Modal = async () => {\n  const {\n    chainId\n  } = store.getState().accountState;\n\n  if (chainId && paramsSwitchNetwork[chainId]) {\n    injectNetworkNoEthereum(chainId);\n  }\n\n  if (chainId && !paramsSwitchNetwork[chainId]) {\n    injectNetworkNoEthereum(chainId);\n  }\n\n  setupWebModal();\n};\n\nconst setupWebModal = async () => {\n  const web3modal = new Web3Modal({\n    cacheProvider: true,\n    providerOptions\n  });\n  const provider = await web3modal.connect();\n  const web3 = new Web3(provider);\n  let currentChainId = await web3.eth.net.getId();\n\n  if (currentChainId && rpcSupport[currentChainId]) {\n    let accounts = await web3.eth.getAccounts();\n    store.dispatch(setChainId(currentChainId));\n    store.dispatch(setWeb3(web3));\n\n    if (accounts.length > 0) {\n      const balance = await web3.eth.getBalance(accounts[0]);\n      store.dispatch(setWalletAddress(accounts[0]));\n      store.dispatch(setBalanceBNB(parseBalance(balance)));\n    }\n  } else {\n    notification('Kingspeed does not support this network', 'warning');\n  }\n\n  provider.on('accountsChanged', async accounts => {\n    store.dispatch(setWalletAddress(accounts[0]));\n  });\n  provider.on('chainChanged', async currentChainId => {\n    currentChainId = web3.utils.hexToNumber(currentChainId);\n\n    if (!!rpcSupport[currentChainId]) {\n      store.dispatch(setChainId(currentChainId));\n      store.dispatch(setWeb3(web3));\n    } else {\n      notification('KingSpeed does not support thhis network', 'warning');\n      store.dispatch(logout());\n    }\n  });\n  provider.on('connect', info => {\n    console.log(info);\n  });\n  provider.on('disconnect', error => {\n    console.log(error);\n    store.dispatch(setWalletAddress(null));\n  });\n};","map":{"version":3,"sources":["D:/visuacode/code-kingspeed/kingspeed/src/connections/web3Modal.ts"],"names":["WalletConnectProvider","store","logout","setWalletAddress","setChainId","setBalanceBNB","setWeb3","getWeb3","parseBalance","notification","Web3","numberToHex","Web3Modal","rpcSupport","providerOptions","walletconnect","package","paramsSwitchNetwork","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","selectChain","walletAddress","injectNetworkNoEthereum","web3Procider","dispatch","injectNetworkEthereum","window","ethereum","request","method","params","connectWeb3Modal","getState","accountState","setupWebModal","web3modal","cacheProvider","provider","connect","web3","currentChainId","eth","net","getId","accounts","getAccounts","length","balance","getBalance","on","utils","hexToNumber","info","console","log","error"],"mappings":"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","sourcesContent":["import WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport store from \"../app/store\";\r\nimport { logout, setWalletAddress, setChainId, setBalanceBNB, setWeb3 } from \"../reducers\";\r\nimport { getWeb3 } from \"../utils/getWeb3List\";\r\nimport { parseBalance } from \"../utils/Helper\";\r\nimport { notification } from \"../utils/Notification\";\r\nimport Web3 from \"web3\";\r\nimport { numberToHex } from \"web3-utils\";\r\nimport Web3Modal from 'web3modal';\r\n\r\ndeclare let window: any\r\nconst rpcSupport: { [key: string]: string } = {\r\n    97: 'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n    56: 'https://bsc-dataseed.binance.org/',\r\n}\r\nconst providerOptions = {\r\n    walletconnect: {\r\n        package: WalletConnectProvider,\r\n    }\r\n}\r\nconst paramsSwitchNetwork: { [key: string]: object } = {\r\n    56: [{\r\n        chainId: '0x38',\r\n        chainName: 'BSC - Mainnet',\r\n        nativeCurrency: {\r\n            name: 'BNB',\r\n            symbol: 'BNB',\r\n            decimals: 18,\r\n        },\r\n        rpcUrls: ['https://bsc-dataseed.binance.org/'],\r\n        blockExplorerUrls: ['https://bscscan.com/'],\r\n    },\r\n    ],\r\n    97: [\r\n        {\r\n            chainId: '0x61',\r\n            chainName: 'BSC - Testnet',\r\n            nativeCurrency: {\r\n                name: 'BNB',\r\n                symbol: 'BNB',\r\n                decimals: 18,\r\n            },\r\n            rpcUrls: ['https://data-seed-prebsc-2-s1.binance.org:8545/'],\r\n            blockExplorerUrls: ['https://testnet.bscscan.com/'],\r\n        },\r\n    ],\r\n}\r\n\r\nexport const selectChain = async (chainId: number, walletAddress: string) => {\r\n    if (!!rpcSupport[chainId]) {\r\n        if (!!walletAddress) {\r\n            injectNetworkNoEthereum(chainId)\r\n        } else {\r\n            const { web3Procider } = getWeb3(chainId)\r\n            store.dispatch(setWeb3(web3Procider))\r\n        }\r\n        store.dispatch(setChainId(chainId))\r\n    } else {\r\n        notification('KingSpeed does nott support this network', 'warning')\r\n    }\r\n}\r\n\r\nexport const injectNetworkEthereum = async (chainId: number) => {\r\n    if (window.ethereum) {\r\n        await window.ethereum?.request({\r\n            method: 'wallet_switchEthereumChain',\r\n            params: [\r\n                {\r\n                    chainId: numberToHex(chainId)\r\n                },\r\n            ],\r\n        })\r\n    } else {\r\n        notification('Metamask is not installed', 'warning')\r\n    }\r\n}\r\n\r\nexport const injectNetworkNoEthereum = async (chainId: number) => {\r\n    if (window.ethereum) {\r\n        await window.ethereum?.request({\r\n            method: 'wall_addEthereumChain',\r\n            params: paramsSwitchNetwork[chainId],\r\n        })\r\n    } else {\r\n        notification('Metamask is not installed', 'warning')\r\n    }\r\n}\r\n\r\nexport const connectWeb3Modal = async () => {\r\n    const { chainId } = store.getState().accountState\r\n\r\n    if (chainId && paramsSwitchNetwork[chainId]) {\r\n        injectNetworkNoEthereum(chainId)\r\n    }\r\n    if (chainId && !paramsSwitchNetwork[chainId]) {\r\n        injectNetworkNoEthereum(chainId)\r\n    }\r\n    setupWebModal()\r\n}\r\n\r\nconst setupWebModal = async () => {\r\n    const web3modal = new Web3Modal({\r\n        cacheProvider: true,\r\n        providerOptions,\r\n    })\r\n    const provider = await web3modal.connect()\r\n    const web3 = new Web3(provider)\r\n    let currentChainId = await web3.eth.net.getId()\r\n\r\n    if (currentChainId && rpcSupport[currentChainId]) {\r\n        let accounts = await web3.eth.getAccounts()\r\n\r\n        store.dispatch(setChainId(currentChainId))\r\n        store.dispatch(setWeb3(web3))\r\n\r\n        if (accounts.length > 0) {\r\n            const balance = await web3.eth.getBalance(accounts[0])\r\n\r\n            store.dispatch(setWalletAddress(accounts[0]))\r\n            store.dispatch(setBalanceBNB(parseBalance(balance)))\r\n        }\r\n    } else {\r\n        notification('Kingspeed does not support this network', 'warning')\r\n    }\r\n\r\n    provider.on('accountsChanged', async (accounts: string[]) => {\r\n        store.dispatch(setWalletAddress(accounts[0]))\r\n    })\r\n    provider.on('chainChanged', async (currentChainId: number) => {\r\n        currentChainId = web3.utils.hexToNumber(currentChainId)\r\n        if (!!rpcSupport[currentChainId]) {\r\n            store.dispatch(setChainId(currentChainId))\r\n            store.dispatch(setWeb3(web3))\r\n        }else{\r\n            notification('KingSpeed does not support thhis network', 'warning')\r\n        store.dispatch(logout())\r\n        }\r\n    })\r\n    provider.on('connect', (info: { currentChainId: number}) => {\r\n        console.log(info)\r\n    })\r\n    provider.on('disconnect', (error: {code: number; message: string}) => {\r\n        console.log(error)\r\n        store.dispatch(setWalletAddress(null))\r\n    })\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}