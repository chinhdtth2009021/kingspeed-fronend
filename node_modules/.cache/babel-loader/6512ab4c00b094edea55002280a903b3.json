{"ast":null,"code":"import Web3 from \"web3\";\nexport const web3Default = {\n  56: {\n    web3Procider: new Web3(new Web3.providers.HttpProvider('https://bsc-dataseed.binance.org/')),\n    name: 'BSC Mainnet',\n    explorer: 'https://bscscan.com/tx/'\n  },\n  97: {\n    web3Procider: new Web3(new Web3.providers.HttpProvider('https://data-seed-prebsc-2-s3.binance.org:8545/')),\n    name: 'BSC Testnet',\n    explorer: 'https://testnet.bscscan.com/tx/'\n  }\n};\nexport const injeccNetworks = {\n  56: {\n    chainId: '0x38',\n    chainName: 'Binance Smart Chain',\n    nativeCurrency: {\n      name: 'Binance Coin',\n      symbol: 'BNB',\n      decimals: 18\n    },\n    rpcUrls: ['https://bsc-dataseed.binance.org'],\n    blockExplorerUrls: ['https://bscscan.com']\n  },\n  97: {\n    chainId: '0x61',\n    chainName: 'Binance Smart Chain',\n    nativeCurrency: {\n      name: 'Binance Coin',\n      symbol: 'BNB',\n      decimals: 18\n    },\n    rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/'],\n    blockExplorerUrls: ['https://testnet.bscscan.com/']\n  }\n};\nexport const getWeb3 = chainId => {\n  return web3Default[chainId];\n};\nexport const getInjecNetwork = chainId => {\n  return injeccNetworks[chainId];\n};","map":{"version":3,"sources":["D:/visuacode/code-kingspeed/kingspeed/src/utils/getWeb3List.ts"],"names":["Web3","web3Default","web3Procider","providers","HttpProvider","name","explorer","injeccNetworks","chainId","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","getWeb3","getInjecNetwork"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,MAAMC,WAAkC,GAAG;AAC9C,MAAI;AACAC,IAAAA,YAAY,EAAE,IAAIF,IAAJ,CAAS,IAAIA,IAAI,CAACG,SAAL,CAAeC,YAAnB,CAAgC,mCAAhC,CAAT,CADd;AAEAC,IAAAA,IAAI,EAAE,aAFN;AAGAC,IAAAA,QAAQ,EAAE;AAHV,GAD0C;AAM9C,MAAG;AACCJ,IAAAA,YAAY,EAAE,IAAIF,IAAJ,CACV,IAAIA,IAAI,CAACG,SAAL,CAAeC,YAAnB,CAAgC,iDAAhC,CADU,CADf;AAICC,IAAAA,IAAI,EAAE,aAJP;AAKCC,IAAAA,QAAQ,EAAE;AALX;AAN2C,CAA3C;AAeP,OAAO,MAAMC,cAAwC,GAAG;AACpD,MAAI;AACAC,IAAAA,OAAO,EAAE,MADT;AAEAC,IAAAA,SAAS,EAAE,qBAFX;AAGAC,IAAAA,cAAc,EAAE;AACZL,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,MAAM,EAAE,KAFI;AAGZC,MAAAA,QAAQ,EAAE;AAHE,KAHhB;AAQAC,IAAAA,OAAO,EAAE,CAAC,kCAAD,CART;AASAC,IAAAA,iBAAiB,EAAE,CAAC,qBAAD;AATnB,GADgD;AAYpD,MAAI;AACAN,IAAAA,OAAO,EAAE,MADT;AAEAC,IAAAA,SAAS,EAAE,qBAFX;AAGAC,IAAAA,cAAc,EAAE;AACpBL,MAAAA,IAAI,EAAE,cADc;AAEpBM,MAAAA,MAAM,EAAE,KAFY;AAGpBC,MAAAA,QAAQ,EAAE;AAHU,KAHhB;AAQRC,IAAAA,OAAO,EAAE,CAAC,iDAAD,CARD;AASRC,IAAAA,iBAAiB,EAAE,CAAC,8BAAD;AATX;AAZgD,CAAjD;AAwBP,OAAO,MAAMC,OAAO,GAAIP,OAAD,IAAqB;AACxC,SAAOP,WAAW,CAACO,OAAD,CAAlB;AACH,CAFM;AAGP,OAAO,MAAMQ,eAAe,GAAIR,OAAD,IAAqB;AAChD,SAAOD,cAAc,CAACC,OAAD,CAArB;AACH,CAFM","sourcesContent":["import Web3 from \"web3\";\r\nexport const web3Default: { [key: string]: any} = {\r\n    56: {\r\n        web3Procider: new Web3(new Web3.providers.HttpProvider('https://bsc-dataseed.binance.org/')),\r\n        name: 'BSC Mainnet',\r\n        explorer: 'https://bscscan.com/tx/',\r\n    },\r\n    97:{\r\n        web3Procider: new Web3 (\r\n            new Web3.providers.HttpProvider('https://data-seed-prebsc-2-s3.binance.org:8545/')       \r\n        ),\r\n        name: 'BSC Testnet',\r\n        explorer: 'https://testnet.bscscan.com/tx/',\r\n    },\r\n}\r\n\r\nexport const injeccNetworks: { [key: string]: object} = {\r\n    56: {\r\n        chainId: '0x38',\r\n        chainName: 'Binance Smart Chain',\r\n        nativeCurrency: {\r\n            name: 'Binance Coin',\r\n            symbol: 'BNB',\r\n            decimals: 18,\r\n        },\r\n        rpcUrls: ['https://bsc-dataseed.binance.org'],\r\n        blockExplorerUrls: ['https://bscscan.com'],\r\n    },\r\n    97: {\r\n        chainId: '0x61',\r\n        chainName: 'Binance Smart Chain',\r\n        nativeCurrency: {\r\n    name: 'Binance Coin',\r\n    symbol: 'BNB',\r\n    decimals: 18,\r\n},\r\nrpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/'],\r\nblockExplorerUrls: ['https://testnet.bscscan.com/'],\r\n    },\r\n}\r\nexport const getWeb3 = (chainId: number) => {\r\n    return web3Default[chainId];\r\n}\r\nexport const getInjecNetwork = (chainId: number) => {\r\n    return injeccNetworks[chainId];\r\n}"]},"metadata":{},"sourceType":"module"}